#%RAML 1.0
title: Orders
baseUri: https://github.com/folio-org/mod-orders
version: v1.1
protocols: [ HTTP, HTTPS ]

documentation:
  - title: Orders Business Logic API
    content: <b>API for managing purchase orders</b>

types:
  composite_purchase_orders: !include acq-models/composite_purchase_orders.json
  composite_purchase_order: !include acq-models/composite_purchase_order.json
  po_line: !include acq-models/composite_po_line.json
  checkin-collection: !include acq-models/mod-orders/schemas/checkinCollection.json
  receiving-collection: !include acq-models/mod-orders/schemas/receivingCollection.json
  receiving-results: !include acq-models/mod-orders/schemas/receivingResults.json
  # Using for now mod-orders-storage schema. Once agreed what kind of extra data is required, the new schema will be defined
  receiving-history: !include acq-models/mod-orders-storage/schemas/receiving_history_collection.json
  errors: !include raml-util/schemas/errors.schema
  po-number: !include acq-models/mod-orders-storage/schemas/po_number.json
  UUID:
    type: string
    pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$

traits:
  pageable: !include raml-util/traits/pageable.raml
  searchable: !include raml-util/traits/searchable.raml
  language: !include raml-util/traits/language.raml
  validate: !include raml-util/traits/validation.raml
  auth:
    responses:
      401:
        description: "Not authorized to perform requested action"
        body:
          text/plain:
            example: "unable to create <<resourcePathName|!singularize>> -- unauthorized"

resourceTypes:
  collection-item: !include raml-util/rtypes/item-collection.raml
  collection-get: !include raml-util/rtypes/collection-get.raml
  # The post-empty-body.raml does not declare request body but it can be defined when this resource type is used
  post-item: !include raml-util/rtypes/post-empty-body.raml
  post-with-200: !include rtypes/post-json-body-200.raml

/orders:
  displayName: Orders
  type:
    # Using `post-item` resource type because at the moment only POST is required. In case GET becomes also required, the `collection` resource type should be used instead
    post-item:
      exampleItem: !include acq-models/examples/composite_purchase_order.sample
      schema: composite_purchase_order
  post:
    description: Post a purchase order (PO) and a number of PO lines; record fund transactions corresponding to the order
    is: [validate, auth]
    body:
      application/json:
        type: composite_purchase_order
        example:
          strict: false
          value: !include acq-models/examples/composite_purchase_order.sample
  /po-number/validate:

     displayName: PO Number Validation
     post:
        description: validate if the PO Number is unique and matches the pattern specified
        is: [validate, auth , language]
        body:
          application/json:
            type: po-number
        responses:
          204:
            description: "Valid PO Number"
          400:
            description: "Bad request, e.g. existing PO Number. Details of the error provided in the response."
            body:
              text/plain:
                example: |
                  "unable to add <<resourcePathName|!singularize>> -- malformed JSON at 13:3"
          500:
            description: "Internal server error, e.g. due to misconfiguration"
            body:
              text/plain:
                example: "Internal server error, contact administrator"
  /{id}:
    uriParameters:
      id:
        description: The UUID of a purchase order
        type: UUID
    type:
      collection-item:
        exampleItem: !include acq-models/examples/composite_purchase_order.sample
        schema: composite_purchase_order
    is: [validate]
    put:
      description: Update an order by id
      is: [validate]
      responses:
        500:
          body:
            application/json:
              type: errors
              example:
                strict: false
                value: !include raml-util/examples/errors.sample
    /lines:
      displayName: Purchase Order Lines
      description: Manage purchase order (PO) lines
      type:
        # Using `post-item` resource type because at the moment only POST is required. In case GET becomes also required, the `collection` resource type should be used instead
        post-item:
          exampleItem: !include acq-models/examples/composite_po_line.sample
          schema: po_line
      is: [validate]
      post:
        displayName: Create a new purchace order line
        description: Post a purchase order (PO) line
        is: [auth]
        body:
          application/json:
            type: po_line
            example:
              strict: false
              value: !include acq-models/examples/composite_po_line.sample
      /{lineId}:
        displayName: Purchase Order Line
        description: Manage purchase order line (PO line) by id
        uriParameters:
          lineId:
            description: The UUID of a purchase order line
            type: UUID
        type:
          collection-item:
            exampleItem: !include acq-models/examples/composite_po_line.sample
            schema: po_line
        is: [validate]
        put:
          description: Update a purchase order line with given {lineId}
          responses:
            500:
              body:
                application/json:
                  type: errors
                  example:
                    strict: false
                    value: !include raml-util/examples/errors.sample
        get:
          description: Return a purchase order line with given {lineId}
        delete:
          description: Delete a purchase order line with given {lineId}
          responses:
            500:
              body:
                application/json:
                  type: errors
                  example:
                    strict: false
                    value: !include raml-util/examples/errors.sample
  /receive:
    displayName: Receive items
    description: Receive items spanning one or more PO lines
    type:
      post-with-200:
        requestSchema: receiving-collection
        responseSchema: receiving-results
        requestExample: !include acq-models/mod-orders/examples/receivingCollection.sample
        responseExample: !include acq-models/mod-orders/examples/receivingResults.sample
    is: [validate]
    post:
      description: Receive items spanning one or more PO lines
  /check-in:
    displayName: Check-in items
    description: Check-in items spanning one or more PO lines
    type:
      post-with-200:
        requestSchema: checkin-collection
        responseSchema: receiving-results
        requestExample: !include acq-models/mod-orders/examples/checkinCollection.sample
        responseExample: !include acq-models/mod-orders/examples/receivingResults.sample
    is: [validate]
    post:
      description: Check-in items spanning one or more po_lines in this order
  /receiving-history:
    displayName: Receiving history
    description: Get receiveing history matching the provided criteria
    is: [
      pageable,
      searchable: {
        description:
          "With valid searchable fields",
        example:
          "title==Harry Potter AND receiving_status==received sortBy po_line_number"
      },
      validate
    ]
    type:
      collection-get:
        exampleCollection: !include acq-models/mod-orders-storage/examples/receiving_history_collection.sample
        schemaCollection: receiving-history
